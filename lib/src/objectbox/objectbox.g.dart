// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../src/entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2691512869897607746),
      name: 'JMDictEntryImpl',
      lastPropertyId: const obx_int.IdUid(21, 1115903151369633878),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1965693606435561525),
            name: 'entSeq',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1859332193219411384),
            name: 'kanjiTexts',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4887360455984101877),
            name: 'kanjiInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4935601866915545608),
            name: 'kanjiPriorities',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8228636773600977260),
            name: 'kanaTexts',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 131570662117379445),
            name: 'romajiTexts',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2463197815915136429),
            name: 'readingRestrictions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7105204416243805259),
            name: 'readingInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4364323464572580371),
            name: 'readingPriorities',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3696462223095234655),
            name: 'glossaries',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 9203471704649110148),
            name: 'kanjiSenseRestrictions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6677382624097775405),
            name: 'readingSenseRestrictions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3148087300170534728),
            name: 'crossReferences',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7486471325902270249),
            name: 'antonyms',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7005991322867126606),
            name: 'partOfSpeeches',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 8488615552144391290),
            name: 'fields',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3468649644577965628),
            name: 'miscellaneous',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3231405483523135553),
            name: 'senseInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 4022055237500998797),
            name: 'sourceLanguages',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 1906478964195216886),
            name: 'dialects',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1115903151369633878),
            name: 'noKanjiInfo',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 2691512869897607746),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    JMDictEntryImpl: obx_int.EntityDefinition<JMDictEntryImpl>(
        model: _entities[0],
        toOneRelations: (JMDictEntryImpl object) => [],
        toManyRelations: (JMDictEntryImpl object) => {},
        getId: (JMDictEntryImpl object) => object.entSeq,
        setId: (JMDictEntryImpl object, int id) {
          if (object.entSeq != id) {
            throw ArgumentError('Field JMDictEntryImpl.entSeq is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.entSeq=${object.entSeq}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (JMDictEntryImpl object, fb.Builder fbb) {
          final kanjiTextsOffset = object.kanjiTexts == null
              ? null
              : fbb.writeString(object.kanjiTexts!);
          final kanjiInfoOffset = object.kanjiInfo == null
              ? null
              : fbb.writeString(object.kanjiInfo!);
          final kanjiPrioritiesOffset = object.kanjiPriorities == null
              ? null
              : fbb.writeString(object.kanjiPriorities!);
          final kanaTextsOffset = fbb.writeString(object.kanaTexts);
          final romajiTextsOffset = fbb.writeString(object.romajiTexts);
          final readingRestrictionsOffset = object.readingRestrictions == null
              ? null
              : fbb.writeString(object.readingRestrictions!);
          final readingInfoOffset = object.readingInfo == null
              ? null
              : fbb.writeString(object.readingInfo!);
          final readingPrioritiesOffset = object.readingPriorities == null
              ? null
              : fbb.writeString(object.readingPriorities!);
          final glossariesOffset = fbb.writeString(object.glossaries);
          final kanjiSenseRestrictionsOffset =
              object.kanjiSenseRestrictions == null
                  ? null
                  : fbb.writeString(object.kanjiSenseRestrictions!);
          final readingSenseRestrictionsOffset =
              object.readingSenseRestrictions == null
                  ? null
                  : fbb.writeString(object.readingSenseRestrictions!);
          final crossReferencesOffset = object.crossReferences == null
              ? null
              : fbb.writeString(object.crossReferences!);
          final antonymsOffset = object.antonyms == null
              ? null
              : fbb.writeString(object.antonyms!);
          final partOfSpeechesOffset = object.partOfSpeeches == null
              ? null
              : fbb.writeString(object.partOfSpeeches!);
          final fieldsOffset =
              object.fields == null ? null : fbb.writeString(object.fields!);
          final miscellaneousOffset = object.miscellaneous == null
              ? null
              : fbb.writeString(object.miscellaneous!);
          final senseInfoOffset = object.senseInfo == null
              ? null
              : fbb.writeString(object.senseInfo!);
          final sourceLanguagesOffset = object.sourceLanguages == null
              ? null
              : fbb.writeString(object.sourceLanguages!);
          final dialectsOffset = object.dialects == null
              ? null
              : fbb.writeString(object.dialects!);
          final noKanjiInfoOffset = object.noKanjiInfo == null
              ? null
              : fbb.writeListInt64(object.noKanjiInfo!);
          fbb.startTable(22);
          fbb.addInt64(0, object.entSeq);
          fbb.addOffset(1, kanjiTextsOffset);
          fbb.addOffset(2, kanjiInfoOffset);
          fbb.addOffset(3, kanjiPrioritiesOffset);
          fbb.addOffset(4, kanaTextsOffset);
          fbb.addOffset(5, romajiTextsOffset);
          fbb.addOffset(6, readingRestrictionsOffset);
          fbb.addOffset(7, readingInfoOffset);
          fbb.addOffset(8, readingPrioritiesOffset);
          fbb.addOffset(9, glossariesOffset);
          fbb.addOffset(10, kanjiSenseRestrictionsOffset);
          fbb.addOffset(11, readingSenseRestrictionsOffset);
          fbb.addOffset(12, crossReferencesOffset);
          fbb.addOffset(13, antonymsOffset);
          fbb.addOffset(14, partOfSpeechesOffset);
          fbb.addOffset(15, fieldsOffset);
          fbb.addOffset(16, miscellaneousOffset);
          fbb.addOffset(17, senseInfoOffset);
          fbb.addOffset(18, sourceLanguagesOffset);
          fbb.addOffset(19, dialectsOffset);
          fbb.addOffset(20, noKanjiInfoOffset);
          fbb.finish(fbb.endTable());
          return object.entSeq;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final entSeqParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final kanjiTextsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final kanjiInfoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final kanjiPrioritiesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final kanaTextsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final romajiTextsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final noKanjiInfoParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final readingRestrictionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final readingInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final readingPrioritiesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final glossariesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final kanjiSenseRestrictionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final readingSenseRestrictionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final crossReferencesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final antonymsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final partOfSpeechesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final fieldsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final miscellaneousParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final senseInfoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final sourceLanguagesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final dialectsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final object = JMDictEntryImpl(
              entSeq: entSeqParam,
              kanjiTexts: kanjiTextsParam,
              kanjiInfo: kanjiInfoParam,
              kanjiPriorities: kanjiPrioritiesParam,
              kanaTexts: kanaTextsParam,
              romajiTexts: romajiTextsParam,
              noKanjiInfo: noKanjiInfoParam,
              readingRestrictions: readingRestrictionsParam,
              readingInfo: readingInfoParam,
              readingPriorities: readingPrioritiesParam,
              glossaries: glossariesParam,
              kanjiSenseRestrictions: kanjiSenseRestrictionsParam,
              readingSenseRestrictions: readingSenseRestrictionsParam,
              crossReferences: crossReferencesParam,
              antonyms: antonymsParam,
              partOfSpeeches: partOfSpeechesParam,
              fields: fieldsParam,
              miscellaneous: miscellaneousParam,
              senseInfo: senseInfoParam,
              sourceLanguages: sourceLanguagesParam,
              dialects: dialectsParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [JMDictEntryImpl] entity fields to define ObjectBox queries.
class JMDictEntryImpl_ {
  /// See [JMDictEntryImpl.entSeq].
  static final entSeq =
      obx.QueryIntegerProperty<JMDictEntryImpl>(_entities[0].properties[0]);

  /// See [JMDictEntryImpl.kanjiTexts].
  static final kanjiTexts =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[1]);

  /// See [JMDictEntryImpl.kanjiInfo].
  static final kanjiInfo =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[2]);

  /// See [JMDictEntryImpl.kanjiPriorities].
  static final kanjiPriorities =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[3]);

  /// See [JMDictEntryImpl.kanaTexts].
  static final kanaTexts =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[4]);

  /// See [JMDictEntryImpl.romajiTexts].
  static final romajiTexts =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[5]);

  /// See [JMDictEntryImpl.readingRestrictions].
  static final readingRestrictions =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[6]);

  /// See [JMDictEntryImpl.readingInfo].
  static final readingInfo =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[7]);

  /// See [JMDictEntryImpl.readingPriorities].
  static final readingPriorities =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[8]);

  /// See [JMDictEntryImpl.glossaries].
  static final glossaries =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[9]);

  /// See [JMDictEntryImpl.kanjiSenseRestrictions].
  static final kanjiSenseRestrictions =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[10]);

  /// See [JMDictEntryImpl.readingSenseRestrictions].
  static final readingSenseRestrictions =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[11]);

  /// See [JMDictEntryImpl.crossReferences].
  static final crossReferences =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[12]);

  /// See [JMDictEntryImpl.antonyms].
  static final antonyms =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[13]);

  /// See [JMDictEntryImpl.partOfSpeeches].
  static final partOfSpeeches =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[14]);

  /// See [JMDictEntryImpl.fields].
  static final fields =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[15]);

  /// See [JMDictEntryImpl.miscellaneous].
  static final miscellaneous =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[16]);

  /// See [JMDictEntryImpl.senseInfo].
  static final senseInfo =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[17]);

  /// See [JMDictEntryImpl.sourceLanguages].
  static final sourceLanguages =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[18]);

  /// See [JMDictEntryImpl.dialects].
  static final dialects =
      obx.QueryStringProperty<JMDictEntryImpl>(_entities[0].properties[19]);

  /// See [JMDictEntryImpl.noKanjiInfo].
  static final noKanjiInfo = obx.QueryIntegerVectorProperty<JMDictEntryImpl>(
      _entities[0].properties[20]);
}
